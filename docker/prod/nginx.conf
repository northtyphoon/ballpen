worker_processes 2; # 2 * Number of CPUs

# max connections = worker_processes * worker_connections * (K / average $request_time)
events { 
	worker_connections 2048; 
}

http {
	# enable web sockets protocol
	map $http_upgrade $connection_upgrade {
		default upgrade;
		'' close;
	}

	# enable compression
	gzip on;
	gzip_http_version 1.0;
	gzip_proxied any;
	gzip_min_length 256;
	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;
		
	# hide server version
	server_tokens off;

	# log only warn | error | crit 
	error_log /var/log/nginx/error.log warn;

	# disable access log
	access_log  /dev/null;

	# let the upstream services handle 404 and 50x errors
	proxy_intercept_errors off;
	
	# enable disk caching of 1GB
	proxy_cache_path /tmp/nginx levels=1:2 keys_zone=STATIC:10m inactive=60m max_size=1g;
	proxy_cache_key "$scheme$request_method$host$request_uri";
	
	# register webapp service
	upstream webapp {
		server webapp1:8080;
	}

	# map webapp service
	server {
		listen 80;
		
		location / {
			proxy_pass http://webapp;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;
			proxy_set_header Host $host;
			proxy_cache_bypass $http_upgrade;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			# enable static file caching
			location ~ \.(svg|jpg|jpeg|gif|png|ico|css|js|woff2)$ {
				# browser caching
				expires 30d;
				add_header Cache-Control "public";
				# server caching
				proxy_cache STATIC;
				proxy_cache_valid 200 301 302 30m;
				proxy_cache_bypass  $http_cache_control;		  
				add_header X-Proxy-Cache $upstream_cache_status;	
				proxy_pass  http://webapp;			
			}
		}
	}
}